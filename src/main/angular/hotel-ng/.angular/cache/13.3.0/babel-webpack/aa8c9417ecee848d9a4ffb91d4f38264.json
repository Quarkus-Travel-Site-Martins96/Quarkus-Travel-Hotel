{"ast":null,"code":"export class EnvSingleton {\n  /**\r\n   * The Singleton's constructor should always be private to prevent direct\r\n   * construction calls with the `new` operator.\r\n   */\n  constructor() {}\n  /**\r\n   * The static method that controls the access to the singleton instance.\r\n   *\r\n   * This implementation let you subclass the Singleton class while keeping\r\n   * just one instance of each subclass around.\r\n   */\n\n\n  static getInstance() {\n    if (!EnvSingleton.instance) {\n      EnvSingleton.instance = new EnvSingleton();\n    }\n\n    return EnvSingleton.instance;\n  }\n\n  set homeHost(value) {\n    this._homeHost = value;\n  }\n\n  get homeHost() {\n    return this._homeHost;\n  }\n\n  set hotelHost(value) {\n    this._hotelHost = value;\n  }\n\n  get hotelHost() {\n    return this._hotelHost;\n  }\n\n  set loginHost(value) {\n    this._loginHost = value;\n  }\n\n  get loginHost() {\n    return this._loginHost;\n  }\n\n  set userMngHost(value) {\n    this._userMngHost = value;\n  }\n\n  get userMngHost() {\n    return this._userMngHost;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}